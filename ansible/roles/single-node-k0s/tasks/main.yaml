# SPDX-FileCopyrightText: 2025 NONE
#
# SPDX-License-Identifier: Unlicense

---
- name: Download k0s binary
  become: true
  ansible.builtin.get_url:
    url: "https://github.com/k0sproject/k0s/releases/download/{{ k0s_version }}/k0s-{{ k0s_version }}-amd64"
    dest: "/usr/local/bin/k0s-{{ k0s_version }}"
    mode: '0750'
    owner: root
    group: root

- name: Create k0s symlink
  become: true
  ansible.builtin.file:
    src: "/usr/local/bin/k0s-{{ k0s_version }}"
    dest: /usr/local/bin/k0s
    state: link
    force: true
- name: Ensure '/etc/k0s' directory
  become: true
  ansible.builtin.file:
    path: /etc/k0s
    state: directory
    mode: '0755'
- name: Download k0s configuration template
  ansible.builtin.get_url:
    url: "{{ k0s_config_url }}"
    dest: /tmp/k0s-config.yaml.j2
    mode: '0644'
  when: k0s_config_url is defined

- name: Apply k0s configuration
  become: true
  ansible.builtin.template:
    src: /tmp/k0s-config.yaml.j2
    dest: /etc/k0s/k0s.yaml
    mode: '0600'
  vars:
    address: "{{ k0s_address }}"
    oidc_issuer_url: "{{ k0s_oidc_issuer_url }}"
    oidc_client_id: "{{ k0s_oidc_client_id }}"
  notify: Restart k0scontroller
  when: k0s_config_url is defined

- name: Check if k0scontroller.service exists
  become: true
  ansible.builtin.stat:
    path: /etc/systemd/system/k0scontroller.service
  register: k0scontroller_service_stat

- name: Install k0s controller
  become: true
  ansible.builtin.command:
    cmd: /usr/local/bin/k0s install controller --single --config /etc/k0s/k0s.yaml
  when: not k0scontroller_service_stat.stat.exists

- name: Start and enable k0scontroller service
  become: true
  ansible.builtin.systemd:
    name: k0scontroller.service
    state: started
    enabled: true

- name: Get kubeconfig from k0s
  become: true
  ansible.builtin.command:
    cmd: /usr/local/bin/k0s kubeconfig admin
  register: k0s_kubeconfig
  changed_when: false

- name: Ensure .kube directory exists
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/.kube"
    state: directory
    mode: '0755'

- name: Save kubeconfig to user's home directory
  ansible.builtin.copy:
    content: "{{ k0s_kubeconfig.stdout }}"
    dest: "{{ ansible_user_dir }}/.kube/config"
    mode: '0600'

- name: Install python libraries
  become: true
  ansible.builtin.pip:
    name:
      - kubernetes
      - jmespath

- name: Get kubectl stable version
  ansible.builtin.uri:
    url: "https://dl.k8s.io/release/stable.txt"
    return_content: true
  register: kubectl_version_result

- name: Download kubectl
  become: true
  ansible.builtin.get_url:
    url: "https://dl.k8s.io/release/{{ kubectl_version_result.content | trim }}/bin/linux/amd64/kubectl"
    dest: /usr/local/bin/kubectl
    mode: '0755'
    owner: root
    group: root


- name: Apply flux manifest
  ansible.builtin.command:
    cmd: >
      kubectl apply
      --kustomize "{{ flux_manifest_url }}" --prune --all
      --prune-allowlist=source.toolkit.fluxcd.io/v1/gitrepository
      --prune-allowlist=source.toolkit.fluxcd.io/v1beta2/helmrepository
      --prune-allowlist=helm.toolkit.fluxcd.io/v2beta2/helmrelease
      --prune-allowlist=kustomize.toolkit.fluxcd.io/v1/kustomization
  environment:
    KUBECONFIG: "{{ ansible_user_dir }}/.kube/config"
  when: flux_manifest_url is defined

- name: Check if DirectPV kustomization exists and is ready
  kubernetes.core.k8s_info:
    api_version: kustomize.toolkit.fluxcd.io/v1
    kind: Kustomization
    name: directpv
    namespace: flux-system
  register: directpv_kustomization

- name: Initialize DirectPV if kustomization is ready
  when: >
    directpv_kustomization.resources | length > 0 and
    directpv_kustomization.resources[0].status.conditions | selectattr('type', 'equalto', 'Ready') | selectattr('status', 'equalto', 'True') | list | length > 0
  block:
    - name: Get DirectPV latest release version
      ansible.builtin.uri:
        url: https://api.github.com/repos/minio/directpv/releases/latest
        return_content: true
      register: directpv_release

    - name: Download kubectl-directpv plugin
      become: true
      ansible.builtin.get_url:
        url: "https://github.com/minio/directpv/releases/download/{{ directpv_release.json.tag_name }}/kubectl-directpv_{{ directpv_release.json.tag_name | regex_replace('^v', '') }}_linux_amd64"
        dest: "/usr/local/bin/kubectl-directpv"
        mode: '0755'
        owner: root
        group: root

    - name: Get all CSI nodes
      kubernetes.core.k8s_info:
        api_version: storage.k8s.io/v1
        kind: CSINode
      register: csi_nodes

    - name: Update DirectPV CSI nodes
      kubernetes.core.k8s:
        api_version: storage.k8s.io/v1
        kind: CSINode
        name: "{{ item.metadata.name }}"
        definition:
          spec:
            drivers: "{{ (item.spec.drivers | default([]) | rejectattr('name', 'equalto', 'directpv.min.io') | list) + [directpv_driver] }}"
      vars:
        directpv_driver:
          name: directpv.min.io
          nodeID: "{{ item.metadata.name }}"
          topologyKeys:
            - directpv.min.io/identity
            - directpv.min.io/node
            - directpv.min.io/rack
            - directpv.min.io/region
            - directpv.min.io/zone
      loop: "{{ csi_nodes.resources }}"
      loop_control:
        label: "{{ item.metadata.name }}"

    - name: Get DirectPV nodes
      kubernetes.core.k8s_info:
        api_version: directpv.min.io/v1beta1
        kind: DirectPVNode
      register: directpv_nodes

    - name: Build DirectPV init config nodes
      ansible.builtin.set_fact:
        directpv_init_nodes: >-
          {{
            directpv_nodes.resources | map('community.general.json_query', node_query) | list
          }}
      vars:
        node_query: >-
          {
            name: metadata.name,
            drives: status.devices[?!denyReason].{
              id: id,
              name: name,
              size: totalCapacity,
              make: make,
              select: 'yes'
            }
          }

    - name: Write DirectPV init config
      ansible.builtin.copy:
        content: "{{ directpv_init_config | to_nice_yaml }}"
        dest: /tmp/directpv-drives.yaml
        mode: '0644'
      vars:
        directpv_init_config:
          version: v1
          nodes: "{{ directpv_init_nodes }}"

    - name: Initialize DirectPV drives
      ansible.builtin.command:
        cmd: kubectl directpv init /tmp/directpv-drives.yaml --dangerous
      environment:
        KUBECONFIG: "{{ ansible_user_dir }}/.kube/config"
